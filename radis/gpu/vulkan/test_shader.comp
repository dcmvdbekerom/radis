#version 450
//#extension GL_ARB_separate_shader_objects : enable
//#extension GL_EXT_shader_atomic_float : enable

#extension  GL_EXT_scalar_block_layout : enable
layout (local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2 ) in;
layout (constant_id = 3) const int N_LINES = 1; //this value is updated by the host code

layout(std430, binding = 0) uniform initData{
    int Nt;
	int Nf;
    int Nw;
    int Nl;
	float dt;
    float t_min;
    float dxL;
    float log_w_min;
} init_d;

layout(std430, binding = 2) buffer database_SSBO {
   float t0_data[N_LINES];
   float log_w_data[N_LINES];
   float I_data[N_LINES];
};

layout(std430, binding = 3) buffer SSBO1 {
   vec2 data_LDM_d[];
};


void main() {

	uint i = gl_WorkGroupID.x * gl_WorkGroupSize.x + gl_LocalInvocationID.x; //gl_GlobalInvocationID.x;

	if (i >= N_LINES) return;

    float ki = (t0_data[i] - init_d.t_min) / init_d.dt;
    int k0i = int(ki);
    int k1i = k0i + 1;
    float avi = ki - float(k0i);

    float li = (log_w_data[i] - init_d.log_w_min) / init_d.dxL;
    int l0i = int(li);
    int l1i = l0i + 1;
    float aLi = li - float(l0i);

    data_LDM_d[l0i * init_d.Nt + k0i] += (1 - aLi) * (1 - avi) * I_data[i];
    data_LDM_d[l0i * init_d.Nt + k1i] += (1 - aLi) * avi * I_data[i];
    data_LDM_d[l1i * init_d.Nt + k0i] += aLi * (1 - avi) * I_data[i];
    data_LDM_d[l1i * init_d.Nt + k1i] += aLi * avi * I_data[i];
}
